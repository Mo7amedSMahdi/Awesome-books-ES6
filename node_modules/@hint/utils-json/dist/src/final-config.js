"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.finalConfig = void 0;
const path = require("path");
const merge = require("lodash/merge");
const utils_network_1 = require("@hint/utils-network");
const utils_fs_1 = require("@hint/utils-fs");
const finalConfig = (config, resource) => {
    if (!config.extends) {
        return config;
    }
    const configIncludes = [];
    let configPath = (0, utils_network_1.asPathString)((0, utils_network_1.getAsUri)(resource));
    configIncludes.push(path.normalize(configPath));
    let finalConfigJSON = merge({}, config);
    while (finalConfigJSON.extends) {
        const lastPath = configPath;
        const configDir = path.dirname(configPath);
        configPath = path.resolve(configDir, finalConfigJSON.extends);
        if (configIncludes.includes(configPath)) {
            const error = new Error(`Circular reference found in file ${lastPath}`);
            const originalPathUri = (0, utils_network_1.getAsUri)(configIncludes[0]);
            error.resource = originalPathUri && originalPathUri.toString() || lastPath;
            return error;
        }
        delete finalConfigJSON.extends;
        try {
            const extendedConfig = (0, utils_fs_1.loadJSONFile)(configPath);
            configIncludes.push(configPath);
            finalConfigJSON = merge({}, extendedConfig, finalConfigJSON);
        }
        catch (err) {
            const lastPathUri = (0, utils_network_1.getAsUri)(lastPath);
            const error = err;
            error.resource = lastPathUri && lastPathUri.toString() || lastPath;
            return error;
        }
    }
    return finalConfigJSON;
};
exports.finalConfig = finalConfig;
